{
    "name": "Generate Prime Numbers Optimized",
    "desc": "Implementation of Odd Sieve of Erasthotones optimized to work partitioned that will generate all primes that are in the first 10 millions numbers optimized for dense params.",
    "kernel": "function genPrime(from,to){var memorySize=((to-from+1)/2)|0;var isPrime=[];for(var i=0;i<memorySize;i++){isPrime[i]=1;}for(var i=3;i*i<=to;i+=2){if(i>=3*3&&i%3==0)continue;if(i>=5*5&&i%5==0)continue;if(i>=7*7&&i%7==0)continue;if(i>=11*11&&i%11==0)continue;if(i>=13*13&&i%13==0)continue;var minJ=((((from+i-1)/i)|0)*i);if(minJ<i*i){minJ=i*i;}if((minJ&1)==0){minJ+=i;}for(var j=minJ;j<=to;j+=2*i){var index=((j-from)/2)|0;isPrime[index]=0;}}var found=[];if(from<=2){found.push(2);}var pos=from+1;for(var i=0;i<memorySize;i++){if(isPrime[i]==1){found.push(pos);}pos+=2;}delete isPrime;return found;}var from=params.data[0];var to=params.data[1];var lastNumber=to;var sliceSize=1024*128;var result=[];for(var ifrom=from;ifrom<=lastNumber;ifrom+=sliceSize){var to=ifrom+sliceSize;if(to>lastNumber){to=lastNumber;}result=result.concat(genPrime(ifrom,to));}",
    "params":  [[2,500002],[500002,1000002],[1000002,1500002],[1500002,2000002],[2000002,2500002],[2500002,3000002],[3000002,3500002],[3500002,4000002],[4000002,4500002],[4500002,5000002],[5000002,5500002],[5500002,6000002],[6000002,6500002],[6500002,7000002],[7000002,7500002],[7500002,8000002],[8000002,8500002],[8500002,9000002],[9000002,9500002],[9500002,10000000]],
    "isPartitioned": true,
    "hasAftBarr": false,
    "afBarrFunc": "",
    "hasContext": false,
    "context": ""

}
