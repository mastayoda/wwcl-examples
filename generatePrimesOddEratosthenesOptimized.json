{
    "name": "Generate Prime Numbers Optimized",
    "desc": "Implementation of Odd Sieve of Erasthotones optimized to work partitioned that will generate all primes that are in the first billion numbers optimized for dense params.",
    "kernel": "function genPrime(from,to){var memorySize=((to-from+1)/2)|0;var isPrime=[];for(var i=0;i<memorySize;i++){isPrime[i]=1;}for(var i=3;i*i<=to;i+=2){if(i>=3*3&&i%3==0)continue;if(i>=5*5&&i%5==0)continue;if(i>=7*7&&i%7==0)continue;if(i>=11*11&&i%11==0)continue;if(i>=13*13&&i%13==0)continue;var minJ=((((from+i-1)/i)|0)*i);if(minJ<i*i){minJ=i*i;}if((minJ&1)==0){minJ+=i;}for(var j=minJ;j<=to;j+=2*i){var index=((j-from)/2)|0;isPrime[index]=0;}}var found=[];if(from<=2){found.push(2);}var pos=from+1;for(var i=0;i<memorySize;i++){if(isPrime[i]==1){found.push(pos);}pos+=2;}delete isPrime;return found;}var from=params.data[0];var to=params.data[1];var lastNumber=to;var sliceSize=1024*20;var result=[];for(var ifrom=from;ifrom<=lastNumber;ifrom+=sliceSize){var to=ifrom+sliceSize;if(to>lastNumber){to=lastNumber;}result=result.concat(genPrime(ifrom,to));}",
    "params":  [[2,50000002],[50000002,100000002],[100000002,150000002],[150000002,200000002],[200000002,250000002],[250000002,300000002],[300000002,350000002],[350000002,400000002],[400000002,450000002],[450000002,500000002],[500000002,550000002],[550000002,600000002],[600000002,650000002],[650000002,700000002],[700000002,750000002],[750000002,800000002],[800000002,850000002],[850000002,900000002],[900000002,950000002],[950000002,1000000000]],
    "isPartitioned": true,
    "hasAftBarr": false,
    "afBarrFunc": "",
    "hasContext": false,
    "context": ""

}
